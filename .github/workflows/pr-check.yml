name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate PR commits
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  preview-release:
    name: Preview Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Preview semantic release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## ðŸš€ Release Preview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Running semantic-release in dry-run mode to preview the next release..." >> $GITHUB_STEP_SUMMARY
          npx semantic-release --dry-run --no-ci 2>&1 | tee release-preview.log || true
          
          # Extract version info if available
          if grep -q "The next release version is" release-preview.log; then
            VERSION=$(grep "The next release version is" release-preview.log | sed 's/.*The next release version is //')
            echo "**Next version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          else
            echo "No release will be created (no relevant changes detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Convention Reminder" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat:\` for new features (minor version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`fix:\` for bug fixes (patch version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat!:\` or \`BREAKING CHANGE:\` for breaking changes (major version bump)" >> $GITHUB_STEP_SUMMARY